{% extends 'sagrarapid/rapid_base.html' %}
{% load static %}
{% load partials %}
{% load filters %}

{% block extra_head %}
<script>
function rapidOrder() {
    return {
        selectedEvent: '',
        selectedCategory: '',
        categories: [],
        products: [],
        rows: [],
        draggingIdx: null,
        showConfirmDelete: false,
        confirmDeleteIdx: null,
        toast: { show: false, message: '', type: 'success' },
        init() {
            window.selectedEvent = this.selectedEvent;
            window.selectedCategory = this.selectedCategory;
            this.$watch('selectedEvent', value => window.selectedEvent = value);
            this.$watch('selectedCategory', value => window.selectedCategory = value);
        },
        fetchCategories() {
            this.selectedCategory = '';
            this.categories = [];
            this.products = [];
            this.rows = [];
            if (!this.selectedEvent) return;
            fetch(`/rapid/get_categories/?event_id=${this.selectedEvent}`)
                .then(r => r.json())
                .then(data => { this.categories = data.categories; });
        },
        fetchProducts() {
            this.products = [];
            if (!this.selectedCategory) return;
            fetch(`/rapid/get_products/?category_id=${this.selectedCategory}`)
                .then(r => r.json())
                .then(data => { this.products = data.products; });
        },
        fetchRows() {
            this.rows = [];
            if (this.selectedEvent && this.selectedCategory) {
                document.body.dispatchEvent(new CustomEvent('categoryChanged'));
            }
        },
        addRow() {
            this.rows.push({ prodotti: [], newProduct: '' });
        },
        confirmRemoveRow(idx) {
            this.showConfirmDelete = true;
            this.confirmDeleteIdx = idx;
        },
        removeRow(idx) {
            this.rows.splice(idx, 1);
            this.showToast('success', 'Riga eliminata');
        },
        addProductToRow(rowIdx) {
            let row = this.rows[rowIdx];
            if (row.newProduct && !row.prodotti.includes(row.newProduct)) {
                row.prodotti.push(row.newProduct);
            }
            row.newProduct = '';
        },
        removeProduct(rowIdx, prodIdx) {
            this.rows[rowIdx].prodotti.splice(prodIdx, 1);
        },
        moveProduct(rowIdx, prodIdx, direction) {
            let row = this.rows[rowIdx];
            let newIdx = prodIdx + direction;
            if (newIdx < 0 || newIdx >= row.prodotti.length) return;
            [row.prodotti[prodIdx], row.prodotti[newIdx]] = [row.prodotti[newIdx], row.prodotti[prodIdx]];
        },
        availableProducts(row) {
            return this.products.filter(p => !row.prodotti.includes(p.id.toString()));
        },
        productName(prodId) {
            let prod = this.products.find(p => p.id.toString() === prodId);
            return prod ? prod.name : prodId;
        },
        saveRows() {
            if (!this.selectedEvent || !this.selectedCategory) return;
            let promises = this.rows.map((row, idx) => {
                return fetch('/rapid/save_row/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-CSRFToken': '{{ csrf_token }}',
                    },
                    body: new URLSearchParams({
                        event_id: this.selectedEvent,
                        category_id: this.selectedCategory,
                        ordine: idx,
                        'prodotti[]': row.prodotti
                    })
                }).then(r => r.json());
            });
            Promise.all(promises).then(results => {
                this.showToast('success', 'Righe salvate con successo');
                this.rows = [];
                document.body.dispatchEvent(new CustomEvent('rowChanged'));
            });
        },
        dragStart(idx) {
            this.draggingIdx = idx;
        },
        dragDrop(idx) {
            if (this.draggingIdx === null || this.draggingIdx === idx) return;
            const moved = this.rows.splice(this.draggingIdx, 1)[0];
            this.rows.splice(idx, 0, moved);
            this.draggingIdx = null;
        },
        showToast(type, message) {
            this.toast.type = type;
            this.toast.message = message;
            this.toast.show = true;
            setTimeout(() => { this.toast.show = false; }, 2500);
        }
    }
}
</script>
{% endblock %}

{% block title %}Inserimento Rapido Ordini{% endblock %}

{% block content %}
<div class="flex flex-col h-screen bg-base-200">
    <div class="flex flex-row justify-between items-center bg-primary p-4 shadow">
        <h1 class="text-white text-2xl font-bold tracking-wide">Inserimento Rapido Ordini</h1>
        <a href="{% url 'account_logout' %}" class="btn btn-ghost text-white">Logout</a>
    </div>
    <div class="flex-1 flex flex-col items-center justify-start py-8 px-2 md:px-0">
        <div class="w-full max-w-2xl card bg-base-100 rounded-lg shadow-xl p-6" x-data="rapidOrder()" x-init="init()">
            <!-- Selezione evento -->
            <div class="mb-4">
                <label class="block text-base-content font-semibold mb-1">Evento</label>
                <select x-model="selectedEvent" @change="fetchCategories()" class="select select-bordered w-full">
                    <option value="">Seleziona evento...</option>
                    {% for event in events %}
                        <option value="{{ event.id }}">{{ event.name }} ({{ event.year }})</option>
                    {% endfor %}
                </select>
            </div>
            <!-- Selezione categoria -->
            <div class="mb-4" x-show="categories.length > 0">
                <label class="block text-base-content font-semibold mb-1">Categoria</label>
                <select x-model="selectedCategory" @change="fetchProducts(); fetchRows();" class="select select-bordered w-full">
                    <option value="">Seleziona categoria...</option>
                    <template x-for="cat in categories" :key="cat.id">
                        <option :value="cat.id" x-text="cat.name"></option>
                    </template>
                </select>
            </div>
            <!-- Tabella righe già salvate -->
            <div class="mb-6" x-show="selectedCategory && selectedEvent">
                <h2 class="text-lg font-semibold text-primary mb-2">Righe salvate</h2>
                <div id="rows-list"
                     hx-get="/rapid/rows_list/"
                     hx-vals='js:{event_id: selectedEvent, category_id: selectedCategory}'
                     hx-trigger="categoryChanged from:body, rowChanged from:body"
                     hx-target="#rows-list"
                     hx-swap="innerHTML"
                     x-show="selectedCategory && selectedEvent">
                    {% partial rows_list %}
                </div>
            </div>
            <!-- Tabella righe in preparazione (drag&drop) -->
            <div class="mb-4" x-show="selectedCategory">
                <div class="flex justify-between items-center mb-2">
                    <h2 class="text-lg font-semibold text-primary">Nuove righe (non salvate)</h2>
                    <button @click="addRow()" class="btn btn-primary">+ Nuova Riga</button>
                </div>
                <template x-if="rows.length === 0">
                    <div class="text-gray-500 italic">Nessuna riga da salvare.</div>
                </template>
                <div class="space-y-4">
                    <template x-for="(row, rowIdx) in rows" :key="rowIdx">
                        <div class="card bg-base-200 border rounded p-3 flex flex-col gap-2 shadow cursor-move"
                             draggable="true"
                             @dragstart="dragStart(rowIdx)"
                             @dragover.prevent
                             @drop="dragDrop(rowIdx)"
                             :class="{ 'ring-2 ring-primary': draggingIdx === rowIdx }">
                            <div class="flex items-center gap-2 mb-1">
                                <span class="font-semibold text-primary">Riga <span x-text="rowIdx+1"></span></span>
                                <button
                                    @click="if (window.confirm('Vuoi davvero eliminare questa riga? L\'operazione non è reversibile.')) { removeRow(rowIdx) }"
                                    class="ml-auto btn btn-sm btn-error btn-circle"
                                    title="Elimina riga"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            </div>
                            <div class="flex flex-wrap gap-2 items-center">
                                <template x-for="(prod, prodIdx) in row.prodotti" :key="prodIdx">
                                    <div class="badge badge-primary badge-lg flex items-center">
                                        <span x-text="productName(prod)"></span>
                                        <button @click="moveProduct(rowIdx, prodIdx, -1)" :disabled="prodIdx === 0" class="ml-1 btn btn-xs btn-ghost" title="Sposta a sinistra">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5 8.25 12l7.5-7.5" />
                                            </svg>
                                        </button>
                                        <button @click="moveProduct(rowIdx, prodIdx, 1)" :disabled="prodIdx === row.prodotti.length-1" class="ml-1 btn btn-xs btn-ghost" title="Sposta a destra">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                              <path stroke-linecap="round" stroke-linejoin="round" d="m8.25 4.5 7.5 7.5-7.5 7.5" />
                                            </svg>
                                        </button>
                                        <button @click="removeProduct(rowIdx, prodIdx)" class="ml-1 btn btn-xs btn-error btn-circle" title="Rimuovi prodotto">&times;</button>
                                    </div>
                                </template>
                                <div>
                                    <select x-model="row.newProduct" class="select select-bordered select-sm" @change="addProductToRow(rowIdx)">
                                        <option value="">+ Aggiungi prodotto...</option>
                                        <template x-for="prod in availableProducts(row)" :key="prod.id">
                                            <option :value="prod.id" x-text="prod.name"></option>
                                        </template>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </template>
                </div>
            </div>
            <!-- Pulsante salva -->
            <div class="mt-6 flex justify-end" x-show="rows.length > 0">
                <button @click="saveRows()" class="btn btn-success btn-lg">Salva tutte le righe</button>
            </div>
            <!-- Modale conferma eliminazione riga -->
            <div x-show="showConfirmDelete" class="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
                <div class="card bg-base-100 shadow-lg p-6 max-w-sm w-full">
                    <h3 class="text-lg font-bold mb-4 text-error">Conferma eliminazione</h3>
                    <p class="mb-6">Vuoi davvero eliminare questa riga? L'operazione non è reversibile.</p>
                    <div class="flex justify-end gap-2">
                        <button @click="showConfirmDelete=false" class="btn btn-secondary">Annulla</button>
                        <button @click="removeRow(confirmDeleteIdx); showConfirmDelete=false" class="btn btn-error">Elimina</button>
                    </div>
                </div>
            </div>
            <!-- Toast personalizzato -->
            <div x-show="toast.show" x-transition class="fixed top-6 right-6 z-50">
                <div :class="toast.type === 'success' ? 'alert alert-success' : 'alert alert-error'" class="shadow-lg">{{ toast.message }}</div>
            </div>
        </div>
    </div>
</div>

{% endblock %}

{% partialdef rows_list %}
{% if rows %}
    <div class="flex flex-col gap-4">
        {% for row in rows %}
        <div class="card bg-base-200 shadow-md p-4 flex flex-col gap-2">
            <div class="flex items-center gap-2 mb-2">
                <span class="font-semibold text-primary">Riga {{ forloop.counter }}</span>
                <form method="post" action="#" 
                      hx-post="/rapid/delete_row/{{ row.id }}/" 
                      hx-target="#rows-list" 
                      hx-swap="innerHTML" 
                      hx-confirm="Vuoi davvero eliminare questa riga? L'operazione non è reversibile."
                      class="ml-auto">
                    {% csrf_token %}
                    <button type="submit" class="btn btn-xs btn-error btn-circle" title="Elimina riga">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                          <path stroke-linecap="round" stroke-linejoin="round" d="M6 18 18 6M6 6l12 12" />
                        </svg>
                    </button>
                </form>
            </div>
            <div class="flex flex-wrap gap-2 items-center" 
                 data-row-id="{{ row.id }}">
                {% for nome in row.prodotti_nomi %}
                    <span class="badge badge-primary badge-lg flex items-center gap-1">
                        {{ nome }}
                    </span>
                {% endfor %}
            </div>
        </div>
        {% endfor %}
    </div>
{% if delete_success %}
<script>window.dispatchEvent(new CustomEvent('show-toast', { detail: { type: 'success', message: 'Riga eliminata con successo' } }));</script>
{% endif %}
{% else %}
    <div class="alert alert-info">Nessuna riga salvata per questo evento/categoria.</div>
{% endif %}
{% endpartialdef %}